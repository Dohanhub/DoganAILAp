name: Test Coverage CI/CD

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Set up test environment
      run: |
        export DATABASE_URL=sqlite:///test.db
        export SECRET_KEY=test-secret-key
        export API_KEY=test-api-key
    
    - name: Run security checks
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Run tests with coverage
      run: |
        pytest --cov=src --cov=engine \
               --cov-report=html:htmlcov \
               --cov-report=xml:coverage.xml \
               --cov-report=term-missing \
               --cov-branch \
               --cov-fail-under=90 \
               --html=test-report.html \
               --self-contained-html \
               src/tests/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-report.html
          htmlcov/
          coverage.xml
          bandit-report.json
          safety-report.json
    
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('coverage.xml')) {
            const coverage = fs.readFileSync('coverage.xml', 'utf8');
            const match = coverage.match(/line-rate="([^"]+)"/);
            if (match) {
              const percentage = Math.round(parseFloat(match[1]) * 100);
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## Test Coverage Report\n\nüìä **Coverage: ${percentage}%**\n\n${percentage >= 65 ? '‚úÖ' : '‚ùå'} Target: 65%\n\n[View detailed report in artifacts]`
              });
            }
          }

  quality-gates:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
    
    - name: Install quality tools
      run: |
        pip install flake8 black isort mypy
    
    - name: Check code formatting
      run: |
        black --check src/ tests/
        isort --check-only src/ tests/
    
    - name: Run linting
      run: |
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
    
    - name: Validate coverage threshold
      run: |
        echo "Coverage validation completed in test job"
