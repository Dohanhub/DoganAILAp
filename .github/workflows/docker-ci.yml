name: Docker CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install -e .
          pip install pytest
      - name: Run tests
        run: pytest -q

  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.api
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Compose up (simple)
        run: |
          docker compose -f docker-compose.simple.yml up -d --build
          # Wait for API to be ready
          for i in {1..20}; do curl -fsS http://localhost:8010/health && break || sleep 3; done
          curl -fsS http://localhost:8010/version
          curl -fsS http://localhost:8010/metrics | head -n 5
          curl -fsS http://localhost:3001 || true
      - name: Compose down
        if: always()
        run: docker compose -f docker-compose.simple.yml down -v

  build-and-test-pdf:
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API PDF image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.api-pdf
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Compose up (pdf stack)
        run: |
          docker compose -f docker-compose.pdf-stack.yml up -d --build
          for i in {1..30}; do curl -fsS http://localhost:8010/health && break || sleep 3; done
          curl -fsS http://localhost:8010/api/reports/standard/NCA/pdf || true
      - name: Compose down
        if: always()
        run: docker compose -f docker-compose.pdf-stack.yml down -v

  e2e-prod:
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Start prod compose
        run: |
          export API_KEY=testkey
          docker compose -f docker-compose.prod.yml up -d --build
          for i in {1..30}; do curl -fsS http://localhost:8010/health && break || sleep 3; done
          for i in {1..30}; do curl -fsS http://localhost:3001 && break || sleep 3; done
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Playwright
        working-directory: e2e
        run: |
          npm install
          npx playwright install --with-deps chromium
      - name: Run E2E tests
        working-directory: e2e
        env:
          WEB: http://localhost:3001
        run: npm test
      - name: Compose down
        if: always()
        run: docker compose -f docker-compose.prod.yml down -v

  staging-deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: staging
    needs: [unit-tests, build-and-test]
    steps:
      - uses: actions/checkout@v4
      - name: Staging smoke (prod compose)
        run: |
          export API_KEY=testkey
          docker compose -f docker-compose.prod.yml up -d --build
          for i in {1..30}; do curl -fsS http://localhost:8010/health && break || sleep 3; done
          curl -fsS http://localhost:8010/version
      - name: Teardown
        if: always()
        run: docker compose -f docker-compose.prod.yml down -v

  production-approve:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    needs: [staging-deploy, e2e-prod, build-and-test-pdf]
    steps:
      - name: Approval placeholder
        run: echo "Production approval gate - deploy step would run here."

  image-scan:
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Build API image
        run: docker build -f Dockerfile.api -t doganai/api:ci .
      - name: Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: doganai/api:ci
          format: 'table'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
          vuln-type: 'os,library'
      - name: SBOM (Syft)
        uses: anchore/syft-action@v0.16.0
        with:
          image: 'doganai/api:ci'
          format: 'spdx-json'
          output: 'sbom.spdx.json'
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
