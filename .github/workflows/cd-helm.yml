name: CD Helm

on:
  workflow_dispatch:
  push:
    tags: [ 'v*.*.*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push API
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.api
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/api:latest
            ghcr.io/${{ github.repository }}/api:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build & push Web
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.web
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/web:latest
            ghcr.io/${{ github.repository }}/web:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & push Gateway
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.gateway
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/gateway:latest
            ghcr.io/${{ github.repository }}/gateway:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign images (keyless)
        env:
          COSIGN_EXPERIMENTAL: 'true'
        run: |
          cosign sign --yes ghcr.io/${{ github.repository }}/api:${{ github.ref_name }}
          cosign sign --yes ghcr.io/${{ github.repository }}/web:${{ github.ref_name }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.4'
      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.4'
      - name: Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
      - name: Helm upgrade staging (Argo Rollouts)
        run: |
          helm upgrade --install doganai deploy/helm/doganai -n doganai --create-namespace \
            --set image.api.repository=ghcr.io/${{ github.repository }}/api \
            --set image.api.tag=${{ github.ref_name }} \
            --set image.web.repository=ghcr.io/${{ github.repository }}/web \
            --set image.web.tag=${{ github.ref_name }} \
            --set image.gateway.repository=ghcr.io/${{ github.repository }}/gateway \
            --set image.gateway.tag=${{ github.ref_name }} \
            --set env.api.SECRET_KEY=${{ secrets.SECRET_KEY }} \
            --set env.api.API_KEY=${{ secrets.API_KEY }} \
            --set env.api.INTERNAL_JWT_SECRET=${{ secrets.INTERNAL_JWT_SECRET }} \
            --set env.api.DATABASE_URL=${{ secrets.DATABASE_URL }} \
            --set env.api.REDIS_URL=${{ secrets.REDIS_URL }} \
            --set flagger.enabled=false \
            --set argoRollouts.enabled=true
      - name: Validate required secrets (staging)
        run: |
          test -n "${{ secrets.KUBE_CONFIG_STAGING }}" || (echo 'Missing KUBE_CONFIG_STAGING' && exit 1)
          test -n "${{ secrets.DATABASE_URL }}" || (echo 'Missing DATABASE_URL' && exit 1)
          test -n "${{ secrets.INTERNAL_JWT_SECRET }}" || (echo 'Missing INTERNAL_JWT_SECRET' && exit 1)
          test -n "${{ secrets.API_KEY }}" || (echo 'Missing API_KEY' && exit 1)
      - name: Gateway smoke (port-forward)
        env:
          INTERNAL_JWT_SECRET: ${{ secrets.INTERNAL_JWT_SECRET }}
        run: |
          kubectl rollout status deploy/doganai-gateway -n doganai
          kubectl port-forward svc/doganai-gateway -n doganai 8080:8080 &
          sleep 5
          python - << 'PY'
import os, time, jwt, requests
aud='gateway'; iss='ci'; now=int(time.time())
tok=jwt.encode({'iss':iss,'aud':aud,'iat':now,'exp':now+60}, os.environ['INTERNAL_JWT_SECRET'], algorithm='HS256')
print(requests.get('http://127.0.0.1:8080/health', timeout=5).json())
PY

  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.4'
      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.4'
      - name: Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > ~/.kube/config
      - name: Helm upgrade prod (Argo Rollouts)
        run: |
          helm upgrade --install doganai deploy/helm/doganai -n doganai --create-namespace \
            --set image.api.repository=ghcr.io/${{ github.repository }}/api \
            --set image.api.tag=${{ github.ref_name }} \
            --set image.web.repository=ghcr.io/${{ github.repository }}/web \
            --set image.web.tag=${{ github.ref_name }} \
            --set image.gateway.repository=ghcr.io/${{ github.repository }}/gateway \
            --set image.gateway.tag=${{ github.ref_name }} \
            --set env.api.SECRET_KEY=${{ secrets.SECRET_KEY }} \
            --set env.api.API_KEY=${{ secrets.API_KEY }} \
            --set env.api.INTERNAL_JWT_SECRET=${{ secrets.INTERNAL_JWT_SECRET }} \
            --set env.api.DATABASE_URL=${{ secrets.DATABASE_URL }} \
            --set env.api.REDIS_URL=${{ secrets.REDIS_URL }} \
            --set flagger.enabled=false \
            --set argoRollouts.enabled=true
