$ErrorActionPreference = 'Stop'

Set-Location -Path (Resolve-Path "$PSScriptRoot/..")

$envPath = Join-Path (Get-Location) '.env'

function New-Hex($bytes) {
  $rng = [System.Security.Cryptography.RandomNumberGenerator]::Create()
  $data = New-Object byte[] $bytes
  $rng.GetBytes($data)
  -join ($data | ForEach-Object { $_.ToString('x2') })
}

function Ensure-Line($key, $value) {
  if (-not (Test-Path $envPath)) { return }
  $content = Get-Content $envPath -Raw
  if ($content -notmatch "(?m)^$key=") {
    Add-Content -Path $envPath -Value "$key=$value"
  }
}

if (-not (Test-Path $envPath)) {
  Write-Host "Creating .env with sensible defaults" -ForegroundColor Yellow
  $SECRET = New-Hex 48
  $APIKEY = New-Hex 24
  @(
    "# Auto-generated by setup_env.ps1",
    "SECRET_KEY=$SECRET",
    "API_KEY=$APIKEY",
    "LOG_LEVEL=INFO",
    "APP_TIMEZONE=UTC",
    "DISPLAY_TIMEZONE=Asia/Riyadh",
    "ALLOWED_ORIGINS=http://localhost:3001,http://127.0.0.1:3001",
    "UPLOAD_DIR=app/uploads",
    "SCRAPE_DIR=app/scraped",
    "USE_S3_UPLOADS=false",
    "# DATABASE_URL=sqlite:///./compliance.db"
  ) | Set-Content -Path $envPath -Encoding UTF8
} else {
  # Fill in any missing keys without overwriting existing ones
  if (-not (Select-String -Path $envPath -Pattern '^SECRET_KEY=' -SimpleMatch)) { Ensure-Line 'SECRET_KEY' (New-Hex 48) }
  if (-not (Select-String -Path $envPath -Pattern '^API_KEY=' -SimpleMatch)) { Ensure-Line 'API_KEY' (New-Hex 24) }
  Ensure-Line 'LOG_LEVEL' 'INFO'
  Ensure-Line 'APP_TIMEZONE' 'UTC'
  Ensure-Line 'DISPLAY_TIMEZONE' 'Asia/Riyadh'
  Ensure-Line 'ALLOWED_ORIGINS' 'http://localhost:3001,http://127.0.0.1:3001'
  Ensure-Line 'UPLOAD_DIR' 'app/uploads'
  Ensure-Line 'SCRAPE_DIR' 'app/scraped'
  Ensure-Line 'USE_S3_UPLOADS' 'false'
}

# Ensure runtime directories
New-Item -ItemType Directory -Path 'app/uploads' -Force | Out-Null
New-Item -ItemType Directory -Path 'app/scraped' -Force | Out-Null

# Auto-detect local Postgres (Docker stack) and set DATABASE_URL if reachable
try {
  $client = New-Object System.Net.Sockets.TcpClient
  $iar = $client.BeginConnect('127.0.0.1', 5432, $null, $null)
  $success = $iar.AsyncWaitHandle.WaitOne(500)
  if ($success) {
    $client.EndConnect($iar)
    if (-not (Select-String -Path $envPath -Pattern '^DATABASE_URL=' -SimpleMatch)) {
      Add-Content -Path $envPath -Value 'DATABASE_URL=postgresql+psycopg2://doganai:doganai@localhost:5432/doganai'
      Write-Host 'Detected local Postgres on 5432; set DATABASE_URL in .env' -ForegroundColor Yellow
    }
    $client.Close()
  }
} catch {}

# Default web env for local dev
$webEnv = Join-Path (Get-Location) 'apps/web/.env.local'
if (-not (Test-Path $webEnv)) {
  New-Item -ItemType Directory -Path 'apps/web' -Force | Out-Null
  Set-Content -Path $webEnv -Value "NEXT_PUBLIC_API_BASE=http://localhost:8010" -Encoding UTF8
}

Write-Host ".env configured. API key and secret generated if missing." -ForegroundColor Green
