# DoganAI Compliance Kit - Ministry of Interior Deployment
# Continuous Database Upload System with OT Principles
# Urgent Delivery Configuration

version: '3.8'

networks:
  ministry_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  ministry_postgres_data:
    driver: local
  ministry_redis_data:
    driver: local
  ministry_prometheus_data:
    driver: local
  ministry_grafana_data:
    driver: local
  ministry_logs:
    driver: local

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  ministry_postgres:
    image: postgres:15-alpine
    container_name: ministry_postgres
    environment:
      POSTGRES_DB: ministry_db
      POSTGRES_USER: doganai
      POSTGRES_PASSWORD: ${DB_PASSWORD:-MinistrySecure2024!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      TZ: Asia/Riyadh
    volumes:
      - ministry_postgres_data:/var/lib/postgresql/data
      - ./scripts/ministry_init.sql:/docker-entrypoint-initdb.d/01_init.sql
      - ./scripts/ministry_schema.sql:/docker-entrypoint-initdb.d/02_schema.sql
      - ministry_logs:/var/log/postgresql
    ports:
      - "5432:5432"
    networks:
      ministry_network:
        ipv4_address: 172.20.0.10
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U doganai -d ministry_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    labels:
      - "ministry.service=database"
      - "ministry.priority=critical"
      - "ot.component=data_storage"

  ministry_redis:
    image: redis:7-alpine
    container_name: ministry_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-MinistryRedis2024!}
    environment:
      TZ: Asia/Riyadh
    volumes:
      - ministry_redis_data:/data
    ports:
      - "6379:6379"
    networks:
      ministry_network:
        ipv4_address: 172.20.0.11
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-MinistryRedis2024!}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    labels:
      - "ministry.service=cache"
      - "ministry.priority=high"
      - "ot.component=data_cache"

  # =============================================================================
  # CONTINUOUS UPLOAD SYSTEM (MAIN SERVICE)
  # =============================================================================
  
  continuous_upload_system:
    build:
      context: .
      dockerfile: Dockerfile.continuous-upload
    container_name: ministry_continuous_upload
    environment:
      # Database Configuration
      DB_HOST: ministry_postgres
      DB_PORT: 5432
      DB_NAME: ministry_db
      DB_USER: doganai
      DB_PASSWORD: ${DB_PASSWORD:-MinistrySecure2024!}
      PRIMARY_DB_URL: postgresql://doganai:${DB_PASSWORD:-MinistrySecure2024!}@ministry_postgres:5432/ministry_db
      
      # Redis Configuration
      REDIS_HOST: ministry_redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-MinistryRedis2024!}
      
      # System Configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      WORKER_COUNT: ${WORKER_COUNT:-3}
      COLLECTION_INTERVAL: ${COLLECTION_INTERVAL:-60}
      BATCH_SIZE: ${BATCH_SIZE:-50}
      MAX_QUEUE_SIZE: ${MAX_QUEUE_SIZE:-1000}
      METRICS_PORT: 9091
      
      # API Endpoints
      COMPLIANCE_URL: http://compliance_engine:8000
      BENCHMARKS_URL: http://benchmarks_service:8002
      MINISTRY_URL: http://ministry_api:8008
      REGULATIONS_URL: http://regulations_service:8009
      
      # Ministry Specific
      MINISTRY_CLASSIFICATION: ${MINISTRY_CLASSIFICATION:-Official}
      MINISTRY_PRIORITY: ${MINISTRY_PRIORITY:-High}
      
      # Timezone
      TZ: Asia/Riyadh
    volumes:
      - ministry_logs:/app/logs
      - ./config:/app/config:ro
    ports:
      - "9091:9091"  # Metrics
    networks:
      ministry_network:
        ipv4_address: 172.20.0.20
    depends_on:
      ministry_postgres:
        condition: service_healthy
      ministry_redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    labels:
      - "ministry.service=continuous_upload"
      - "ministry.priority=critical"
      - "ministry.classification=official"
      - "ot.component=data_processor"
      - "ot.reliability=high"

  # =============================================================================
  # COMPLIANCE ENGINE
  # =============================================================================
  
  compliance_engine:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: ministry_compliance_engine
    environment:
      DATABASE_URL: postgresql://doganai:${DB_PASSWORD:-MinistrySecure2024!}@ministry_postgres:5432/ministry_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-MinistryRedis2024!}@ministry_redis:6379/0
      ENVIRONMENT: production
      DEBUG: "false"
      ENABLE_PII_REDACTION: "true"
      DATA_RESIDENCY: KSA
      JWT_EXPIRY: 3600
      TZ: Asia/Riyadh
    ports:
      - "8000:8000"
    networks:
      ministry_network:
        ipv4_address: 172.20.0.30
    depends_on:
      ministry_postgres:
        condition: service_healthy
      ministry_redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "ministry.service=compliance_engine"
      - "ministry.priority=high"
      - "ot.component=compliance_processor"

  # =============================================================================
  # MINISTRY API SERVICE
  # =============================================================================
  
  ministry_api:
    build:
      context: ./microservices/ministry
      dockerfile: Dockerfile
    container_name: ministry_api_service
    environment:
      DATABASE_URL: postgresql://doganai:${DB_PASSWORD:-MinistrySecure2024!}@ministry_postgres:5432/ministry_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-MinistryRedis2024!}@ministry_redis:6379/1
      MINISTRY_CLASSIFICATION: ${MINISTRY_CLASSIFICATION:-Official}
      SECURITY_LEVEL: High
      TZ: Asia/Riyadh
    ports:
      - "8008:8008"
    networks:
      ministry_network:
        ipv4_address: 172.20.0.38
    depends_on:
      ministry_postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "ministry.service=api"
      - "ministry.priority=critical"
      - "ministry.classification=official"
      - "ot.component=api_gateway"

  # =============================================================================
  # MONITORING SERVICES
  # =============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: ministry_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ministry_prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      ministry_network:
        ipv4_address: 172.20.0.50
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "ministry.service=monitoring"
      - "ministry.priority=medium"
      - "ot.component=metrics_collector"

  grafana:
    image: grafana/grafana:latest
    container_name: ministry_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-MinistryGrafana2024!}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_ALLOW_EMBEDDING: "true"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      TZ: Asia/Riyadh
    volumes:
      - ministry_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      ministry_network:
        ipv4_address: 172.20.0.51
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "ministry.service=dashboard"
      - "ministry.priority=medium"
      - "ot.component=visualization"

  # =============================================================================
  # NGINX REVERSE PROXY
  # =============================================================================
  
  nginx:
    image: nginx:alpine
    container_name: ministry_nginx
    volumes:
      - ./nginx/ministry.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ministry_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      ministry_network:
        ipv4_address: 172.20.0.60
    depends_on:
      - continuous_upload_system
      - compliance_engine
      - ministry_api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    labels:
      - "ministry.service=proxy"
      - "ministry.priority=high"
      - "ot.component=load_balancer"

  # =============================================================================
  # LOG AGGREGATION
  # =============================================================================
  
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: ministry_fluentd
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - ministry_logs:/var/log/containers:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      ministry_network:
        ipv4_address: 172.20.0.70
    restart: unless-stopped
    labels:
      - "ministry.service=logging"
      - "ministry.priority=medium"
      - "ot.component=log_aggregator"

# =============================================================================
# DEPLOYMENT CONFIGURATION
# =============================================================================

# To deploy this system for Ministry of Interior:
# 1. Copy this file to docker-compose.yml
# 2. Create .env file with secure passwords
# 3. Run: docker-compose up -d
# 4. Access services:
#    - Continuous Upload Metrics: http://localhost:9091/metrics
#    - Compliance Engine: http://localhost:8000
#    - Ministry API: http://localhost:8008
#    - Grafana Dashboard: http://localhost:3000
#    - Prometheus: http://localhost:9090

# Security Notes for Ministry Deployment:
# - Change all default passwords in .env file
# - Enable SSL/TLS in production
# - Configure firewall rules
# - Set up proper backup procedures
# - Enable audit logging
# - Configure monitoring alerts