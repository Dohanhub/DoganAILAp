name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up Rust (for WASM)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: wasm32-unknown-unknown

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        run: uv sync

      - name: Lint (Ruff + MyPy)
        run: |
          uv run ruff check .
          uv run mypy backend

      - name: Run tests with coverage
        run: uv run pytest --maxfail=1 --disable-warnings --cov=backend --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml

      - name: Build Rust policy engine
        run: |
          cd policy-core
          cargo build --release --target wasm32-unknown-unknown

      - name: Verify no placeholders in code
        run: |
          if grep -rniE "TODO|PLACEHOLDER|STUB" backend/ frontend/ policy-core/; then
            echo "❌ Placeholder or stub code detected! Must be removed."
            exit 1
          fi

      - name: Check docs updated
        run: |
          if ! git diff --name-only origin/main...HEAD | grep -qE "docs/|ADRs/"; then
            echo "⚠️ Docs/ADRs not updated in this PR. Please document changes."
            exit 1
          fi

      - name: Generate SBOM (CycloneDX)
        run: |
          pip install cyclonedx-bom
          cyclonedx-py env -o sbom.json

      - name: Archive SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

  e2e:
    runs-on: ubuntu-latest
    needs: build-test
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: scenariokit
        ports: ["5432:5432"]
      redis:
        image: redis:7
        ports: ["6379:6379"]
    steps:
      - uses: actions/checkout@v4
      - name: Run end-to-end tests
        run: uv run pytest backend/tests/e2e
