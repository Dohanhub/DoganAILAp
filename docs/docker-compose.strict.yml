version: '3.8'

services:
  # Main Application Container
  doganai-app:
    build:
      context: .
      dockerfile: Dockerfile.strict
    container_name: doganai-compliance-app
    restart: unless-stopped
    ports:
      - "5000:5000"  # Streamlit Dashboard
      - "8000:8000"  # FastAPI Backend
      - "3000:3000"  # React Frontend
    environment:
      - NODE_ENV=production
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://postgres:postgres@doganai-db:5432/doganai_compliance
      - REDIS_URL=redis://doganai-redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - AUTO_IP_ALLOCATION=true
      - DOCKER_NETWORK_MODE=strict
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config
    networks:
      - doganai-network
    depends_on:
      - doganai-db
      - doganai-redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  doganai-db:
    image: postgres:16-alpine
    container_name: doganai-compliance-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=doganai_compliance
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - doganai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d doganai_compliance"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "5432:5432"

  # Redis Cache
  doganai-redis:
    image: redis:7-alpine
    container_name: doganai-compliance-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - doganai-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "6379:6379"

  # Nginx Reverse Proxy
  doganai-nginx:
    image: nginx:alpine
    container_name: doganai-compliance-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - doganai-network
    depends_on:
      - doganai-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring & Logging
  doganai-monitoring:
    image: prom/prometheus:latest
    container_name: doganai-compliance-monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - doganai-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboard
  doganai-grafana:
    image: grafana/grafana:latest
    container_name: doganai-compliance-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - doganai-network
    depends_on:
      - doganai-monitoring

  # Automated Testing Container
  doganai-tests:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: doganai-compliance-tests
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@doganai-db:5432/doganai_compliance_test
      - TEST_ENVIRONMENT=true
    networks:
      - doganai-network
    depends_on:
      - doganai-db
    volumes:
      - ./tests:/app/tests
      - ./test-results:/app/test-results

  # Security Scanner
  doganai-security:
    image: aquasec/trivy:latest
    container_name: doganai-compliance-security
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./security-reports:/reports
    networks:
      - doganai-network
    command: >
      sh -c "
        trivy image --format json --output /reports/vulnerabilities.json doganai-compliance-app:latest &&
        trivy config --format json --output /reports/config-audit.json . &&
        echo 'Security scan completed'
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  doganai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: doganai-bridge
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
