# SECURITY WARNING: Replace all default passwords with strong, randomly generated secrets
# Use: kubectl create secret generic <name> --from-literal=<key>=<value>
# Or use external secret management tools like Vault, AWS Secrets Manager, etc.

apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: doganai-compliance
  annotations:
    kubernetes.io/description: "Database credentials - MUST be replaced with strong passwords"
type: Opaque
data:
  # CRITICAL: Replace with strong random passwords (use: openssl rand -base64 32)
  postgres-password: ""  # REPLACE: echo -n 'YOUR_STRONG_PASSWORD' | base64
  postgres-user: ""               # REPLACE: echo -n 'YOUR_DB_USER' | base64 (avoid 'postgres')
  postgres-db: ""                 # REPLACE: echo -n 'YOUR_DB_NAME' | base64
  # Optional: full DB URL if deployments reference it directly
  postgres-url: ""               # REPLACE: echo -n 'postgresql://USER:PASS@db-primary:5432/DB?sslmode=require' | base64
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: doganai-compliance
  annotations:
    kubernetes.io/description: "Redis credentials - MUST be replaced with strong passwords"
type: Opaque
data:
  # CRITICAL: Replace with strong random password (use: openssl rand -base64 32)
  redis-password: ""  # REPLACE: echo -n 'YOUR_STRONG_REDIS_PASSWORD' | base64
  # Optional: full Redis URL if deployments reference it directly
  redis-url: ""       # REPLACE: echo -n 'redis://:PASSWORD@redis:6379/0' | base64
---
apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
  namespace: doganai-compliance
  annotations:
    kubernetes.io/description: "JWT signing secret - MUST be cryptographically strong"
type: Opaque
data:
  # CRITICAL: Replace with cryptographically strong secret (use: openssl rand -base64 64)
  jwt-secret: ""  # REPLACE: echo -n 'YOUR_STRONG_JWT_SECRET' | base64
---
apiVersion: v1
kind: Secret
metadata:
  name: session-secret
  namespace: doganai-compliance
  annotations:
    kubernetes.io/description: "Session signing secret - moved from ConfigMap for security"
type: Opaque
data:
  # CRITICAL: Replace with cryptographically strong secret (use: openssl rand -base64 64)
  session-secret: ""  # REPLACE: echo -n 'YOUR_STRONG_SESSION_SECRET' | base64
---
apiVersion: v1
kind: Secret
metadata:
  name: api-keys
  namespace: doganai-compliance
  annotations:
    kubernetes.io/description: "External API keys - populate with actual keys"
type: Opaque
data:
  openai-api-key: ""                # Add your OpenAI API key (base64 encoded)
  cohere-api-key: ""                # Add your Cohere API key (base64 encoded)
  nca-api-key: ""                   # Add your NCA API key (base64 encoded)
  sama-api-key: ""                  # Add your SAMA API key (base64 encoded)
  moh-api-key: ""                   # Add your MoH API key (base64 encoded)
---
---
apiVersion: v1
kind: Secret
metadata:
  name: haproxy-auth
  namespace: doganai-compliance
  annotations:
    kubernetes.io/description: "HAProxy stats authentication"
type: Opaque
data:
  # CRITICAL: Replace with strong credentials (use: openssl rand -base64 16)
  stats-username: ""  # REPLACE: echo -n 'YOUR_ADMIN_USER' | base64
  stats-password: ""  # REPLACE: echo -n 'YOUR_STRONG_ADMIN_PASSWORD' | base64
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: doganai-compliance
  annotations:
    kubernetes.io/description: "Application SECRET_KEY for signing (JWT, sessions)"
type: Opaque
data:
  # CRITICAL: Replace with strong, random key (min 32 chars)
  secret-key: ""  # REPLACE: echo -n 'YOUR_STRONG_APP_SECRET_KEY' | base64
---
apiVersion: v1
kind: Secret
metadata:
  name: weaviate-secret
  namespace: doganai-compliance
  annotations:
    kubernetes.io/description: "Weaviate API key (auth enabled)"
type: Opaque
data:
  # Optional: Set only if AUTHENTICATION_APIKEY_ENABLED=true
  weaviate-api-key: ""  # REPLACE: echo -n 'YOUR_WEAVIATE_API_KEY' | base64
---
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-secret
  namespace: doganai-logging
  annotations:
    kubernetes.io/description: "Elasticsearch credentials for X-Pack security"
type: Opaque
data:
  elastic-username: ZWxhc3RpYw==  # 'elastic' (base64)
  elastic-password: ""             # REPLACE: echo -n 'YOUR_STRONG_ELASTIC_PASSWORD' | base64
---
apiVersion: v1
kind: Secret
metadata:
  name: doganai-tls-secret
  namespace: doganai-compliance
  annotations:
    kubernetes.io/description: "TLS cert for primary ingress"
type: kubernetes.io/tls
data:
  tls.crt: ""  # REPLACE: base64-encoded certificate
  tls.key: ""  # REPLACE: base64-encoded private key
---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-tls-secret
  namespace: doganai-compliance
  annotations:
    kubernetes.io/description: "TLS cert for monitoring ingress"
type: kubernetes.io/tls
data:
  tls.crt: ""
  tls.key: ""
---
apiVersion: v1
kind: Secret
metadata:
  name: logging-tls-secret
  namespace: doganai-logging
  annotations:
    kubernetes.io/description: "TLS cert for logging/ELK ingress"
type: kubernetes.io/tls
data:
  tls.crt: ""
  tls.key: ""

