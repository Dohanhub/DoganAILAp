version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: doganai-postgres
    environment:
      POSTGRES_DB: doganai_compliance
      POSTGRES_USER: doganai_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - doganai-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: doganai-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - doganai-network
    restart: unless-stopped

  # Compliance Engine Service
  compliance-engine:
    build:
      context: ./compliance-engine
      dockerfile: Dockerfile
    container_name: doganai-compliance-engine
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - APP_ENV=production
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - doganai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Benchmarks Service
  benchmarks:
    build:
      context: ./benchmarks
      dockerfile: Dockerfile
    container_name: doganai-benchmarks
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - APP_ENV=production
      - DEBUG=false
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - redis
    networks:
      - doganai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI/ML Service
  ai-ml:
    build:
      context: ./ai-ml
      dockerfile: Dockerfile
    container_name: doganai-ai-ml
    environment:
      - REDIS_URL=${REDIS_URL}
      - APP_ENV=production
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "8002:8002"
    depends_on:
      - redis
    networks:
      - doganai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Integrations Service
  integrations:
    build:
      context: ./integrations
      dockerfile: Dockerfile
    container_name: doganai-integrations
    environment:
      - REDIS_URL=${REDIS_URL}
      - APP_ENV=production
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "8003:8003"
    depends_on:
      - redis
    networks:
      - doganai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Authentication Service
  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    container_name: doganai-auth
    environment:
      - REDIS_URL=${REDIS_URL}
      - APP_ENV=production
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}
    ports:
      - "8004:8004"
    depends_on:
      - redis
    networks:
      - doganai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Agent Service
  ai-agent:
    build:
      context: ./ai-agent
      dockerfile: Dockerfile
    container_name: doganai-ai-agent
    environment:
      - REDIS_URL=${REDIS_URL}
      - APP_ENV=production
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - COMPLIANCE_ENGINE_URL=http://compliance-engine:8000
      - BENCHMARKS_URL=http://benchmarks:8001
      - AI_ML_URL=http://ai-ml:8002
      - INTEGRATIONS_URL=http://integrations:8003
      - AUTH_URL=http://auth:8004
    ports:
      - "8005:8005"
    depends_on:
      - redis
      - compliance-engine
      - benchmarks
      - ai-ml
      - integrations
      - auth
    networks:
      - doganai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # UI Service
  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    container_name: doganai-ui
    environment:
      - APP_ENV=production
      - DEBUG=false
    ports:
      - "8501:8501"
    depends_on:
      - compliance-engine
      - benchmarks
      - ai-ml
      - integrations
      - auth
      - ai-agent
    networks:
      - doganai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: doganai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - ui
      - compliance-engine
      - benchmarks
      - ai-ml
      - integrations
      - auth
      - ai-agent
    networks:
      - doganai-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: doganai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - doganai-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: doganai-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - doganai-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  doganai-network:
    driver: bridge
