version: "3.9"

# Strong Application Engine Architecture for DoganAI Compliance Kit
# Supports 2,000-3,000 concurrent enterprise users and IBM demo scale

services:
  # ========================================
  # 1. CORE APPLICATION ENGINE (3 App Servers)
  # ========================================
  app-server-1:
    build:
      context: ..
      dockerfile: microservices/ui/Dockerfile
    environment:
      - NODE_ENV=production
      - APP_INSTANCE=1
      - DATABASE_URL=postgresql://postgres:postgres@db-primary:5432/doganai
      - REDIS_URL=redis://redis:6379
      - VECTOR_DB_URL=http://weaviate:8080
    ports: ["8001:8001"]
    depends_on:
      db-primary:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    networks:
      - doganai-net
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  app-server-2:
    build:
      context: ..
      dockerfile: microservices/ui/Dockerfile
    environment:
      - NODE_ENV=production
      - APP_INSTANCE=2
      - DATABASE_URL=postgresql://postgres:postgres@db-primary:5432/doganai
      - REDIS_URL=redis://redis:6379
      - VECTOR_DB_URL=http://weaviate:8080
    ports: ["8002:8001"]
    depends_on:
      db-primary:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    networks:
      - doganai-net
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  app-server-3:
    build:
      context: ..
      dockerfile: microservices/ui/Dockerfile
    environment:
      - NODE_ENV=production
      - APP_INSTANCE=3
      - DATABASE_URL=postgresql://postgres:postgres@db-primary:5432/doganai
      - REDIS_URL=redis://redis:6379
      - VECTOR_DB_URL=http://weaviate:8080
    ports: ["8003:8001"]
    depends_on:
      db-primary:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    networks:
      - doganai-net
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ========================================
  # 2. DATABASE ENGINE (Primary + Replica)
  # ========================================
  db-primary:
    build:
      context: .
      dockerfile: Dockerfile.db
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: doganai
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
    ports: ["5432:5432"]
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d doganai"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - doganai-net
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  db-replica:
    build:
      context: .
      dockerfile: Dockerfile.db
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: doganai
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
      POSTGRES_MAX_CONNECTIONS: 100
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
    ports: ["5433:5432"]
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./postgresql-replica.conf:/etc/postgresql/postgresql.conf:ro
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d doganai"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - doganai-net
    depends_on:
      db-primary:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # ========================================
  # 3. SEARCH / VECTOR ENGINE (Weaviate)
  # ========================================
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai'
      CLUSTER_HOSTNAME: 'node1'
      VECTOR_DISTANCE_METRIC: 'cosine'
      ENABLE_CUDA: 'false'
    ports: ["8080:8080"]
    volumes:
      - weaviate_data:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - doganai-net
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # ========================================
  # 4. AI / LLM ENGINE (Local GPU Support)
  # ========================================
  ai-engine-1:
    build:
      context: ..
      dockerfile: microservices/ai-ml/Dockerfile
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
      - CUDA_VISIBLE_DEVICES=0
      - MODEL_PATH=/models
      - GPU_MEMORY_LIMIT=80GB
    ports: ["8004:8000"]
    volumes:
      - ai_models:/models
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - doganai-net
    depends_on:
      db-primary:
        condition: service_healthy

  ai-engine-2:
    build:
      context: ..
      dockerfile: microservices/ai-ml/Dockerfile
    environment:
      - NVIDIA_VISIBLE_DEVICES=1
      - CUDA_VISIBLE_DEVICES=1
      - MODEL_PATH=/models
      - GPU_MEMORY_LIMIT=80GB
    ports: ["8005:8000"]
    volumes:
      - ai_models:/models
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - doganai-net
    depends_on:
      db-primary:
        condition: service_healthy

  # ========================================
  # 5. COMPLIANCE & LOGGING ENGINE (ELK Stack)
  # ========================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - cluster.name=doganai-compliance
    ports: ["9200:9200"]
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - doganai-net
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    environment:
      - LS_JAVA_OPTS=-Xms1g -Xmx1g
    ports: ["5044:5044", "9600:9600"]
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    networks:
      - doganai-net
    depends_on:
      elasticsearch:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports: ["5601:5601"]
    networks:
      - doganai-net
    depends_on:
      elasticsearch:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ========================================
  # 6. SECURITY & PROXY LAYER (NGINX + WAF)
  # ========================================
  nginx-proxy:
    image: nginx:alpine
    ports: ["80:80", "443:443"]
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - doganai-net
    depends_on:
      - app-server-1
      - app-server-2
      - app-server-3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ========================================
  # 7. REDIS CACHE & SESSION STORE
  # ========================================
  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - doganai-net
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ========================================
  # 8. LOAD BALANCER (HAProxy)
  # ========================================
  haproxy:
    image: haproxy:2.8-alpine
    ports: ["8080:8080", "8404:8404"]
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      - doganai-net
    depends_on:
      - app-server-1
      - app-server-2
      - app-server-3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ========================================
  # 9. MONITORING & METRICS (Prometheus + Grafana)
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    ports: ["9090:9090"]
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - doganai-net
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  grafana:
    image: grafana/grafana:latest
    ports: ["3000:3000"]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - doganai-net
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ========================================
  # 10. DATABASE ADMIN & MIGRATION
  # ========================================
  db-admin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@dogan-ai.com
      PGADMIN_DEFAULT_PASSWORD: Admin@123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports: ["5050:80"]
    depends_on:
      db-primary:
        condition: service_healthy
    networks:
      - doganai-net
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  migrate:
    build:
      context: .
      dockerfile: Dockerfile.migrate
    depends_on:
      db-primary:
        condition: service_healthy
    environment:
      FLYWAY_URL: jdbc:postgresql://db-primary:5432/doganai
      FLYWAY_USER: postgres
      FLYWAY_PASSWORD: postgres
      FLYWAY_LOCATIONS: filesystem:/flyway/sql
      FLYWAY_BASELINE_ON_MIGRATE: true
      FLYWAY_VALIDATE_ON_MIGRATE: true
    volumes:
      - ../migrations:/flyway/sql:ro
    networks:
      - doganai-net

volumes:
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local
  weaviate_data:
    driver: local
  ai_models:
    driver: local
  elasticsearch_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  doganai-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
