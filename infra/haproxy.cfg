global
    daemon
    maxconn 4096
    log stdout format raw local0 info
    user haproxy
    group haproxy

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option forwardfor
    option http-server-close
    timeout connect 5000
    timeout client 50000
    timeout server 50000
    timeout http-request 10s
    timeout http-keep-alive 10s
    timeout check 10s

# Stats page
listen stats
    # Restrict stats to localhost; expose safely via SSH tunnel or internal ingress
    bind 127.0.0.1:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    # Set strong credentials via config management/secrets before enabling external access
    stats auth admin:CHANGEME-STRONG-PASSWORD

# Main application load balancer
frontend app_frontend
    bind *:8080
    mode http
    default_backend app_backend
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 100 }
    
    # Security headers
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header Referrer-Policy "no-referrer-when-downgrade"

backend app_backend
    mode http
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    default-server inter 3s fall 3 rise 2
    
    # App servers with health checks
    server app1 app-server-1:8001 check weight 100 maxconn 1000
    server app2 app-server-2:8001 check weight 100 maxconn 1000
    server app3 app-server-3:8001 check weight 100 maxconn 1000
    
    # Health check settings
    option httpchk GET /health
    http-check expect status 200
    http-check expect string "healthy"
    
    # Connection settings
    option http-server-close
    option forwardfor
    option http-pretend-keepalive
    
    # Timeout settings
    timeout connect 5s
    timeout server 30s
    timeout check 10s

# API-specific backend with stricter rate limiting
frontend api_frontend
    bind *:8081
    mode http
    default_backend api_backend
    
    # Stricter rate limiting for API
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 50 }

backend api_backend
    mode http
    balance leastconn
    option httpchk GET /api/health
    http-check expect status 200
    
    server app1 app-server-1:8001 check weight 100 maxconn 500
    server app2 app-server-2:8001 check weight 100 maxconn 500
    server app3 app-server-3:8001 check weight 100 maxconn 500

# Database load balancer (read/write separation)
frontend db_frontend
    bind *:5434
    mode tcp
    default_backend db_backend

backend db_backend
    mode tcp
    balance roundrobin
    option tcp-check
    
    # Primary for writes
    server db-primary db-primary:5432 check weight 200 maxconn 100
    # Replica for reads
    server db-replica db-replica:5432 check weight 100 maxconn 100 backup

# Redis load balancer
frontend redis_frontend
    bind *:6380
    mode tcp
    default_backend redis_backend

backend redis_backend
    mode tcp
    balance roundrobin
    option tcp-check
    
    server redis redis:6379 check weight 100 maxconn 1000

# Monitoring endpoints
frontend monitoring_frontend
    # Restrict monitoring UI to localhost by default
    bind 127.0.0.1:8082
    mode http
    default_backend monitoring_backend

backend monitoring_backend
    mode http
    balance roundrobin
    
    server prometheus prometheus:9090 check
    server grafana grafana:3000 check
    server kibana kibana:5601 check
